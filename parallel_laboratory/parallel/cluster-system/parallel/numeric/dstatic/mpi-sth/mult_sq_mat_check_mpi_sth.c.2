/* 
	file for function of matrix multiplication with chekerboard partition 
	in MPI implementation avec SHTREAD
*/
#include<stdio.h>
#include<math.h>
#include<parallel/parallel-mpi-sth.h>
st_mutex_t mutex[1];
st_cond_t cond[1];
#define NR_ITER 10
/* structure de comunication pour Bcastp */
int MPI_Bcastp_check_sth(int source,int dim,double **c,MPI_Comm com,st_join_counter_t *join)
{
int i,j,l,n,m;
int coordonne[2];
	MPI_Cart_coords(com,source,2,coordonne);
	j=dim*coordonne[1];
	l=0;
	m=0;
	while(l<dim)
	{
		st_mutex_lock(mutex);
		st_cond_wait(cond,mutex);
		st_mutex_unlock(mutex);
		for(n=0;n<NR_ITER;n++)
		{
			if((m*NR_ITER+n)==dim)
				st_join_counter_finish(join);
			i=dim*coordonne[0]+n+m*NR_ITER;
			MPI_Bcast(&c[i][j],dim,MPI_DOUBLE,source,MPI_COMM_WORLD);
			l++;
		}
		m++;
	}
	st_join_counter_finish(join);
}
int mult_sq_mat_check_mpi_sth(int dim,double **a,double **b,double **c)
/*
	dim c'est la dimension de matrice
	thread c'est le numero de threads
	a c'est la premier matrice
	b c'est la deuxieme matrice
	c c'est la matrice de resoudre
*/
{
int q;	/* c'est la dimension de partition */
int s;	/* c'est le numero de done qui a chacun proces */
int i,j,k,l,m;	/* counteurs */
/* pour le reseau */
MPI_Comm	mesh2_comm;			/* reseau pour faire calcule */
int rank;						/* rank de thread in normal communicator */
int coordonne[2];				/* rank de thread in cartesian coordonne */
int size;						/* numero de threads */
int dims[2];					/* les dimensions */
int periodicite[2];			/* la periodicite de reseau */
st_join_counter_t cnt_join[1];
int n;
	MPI_Comm_size(MPI_COMM_WORLD,&size);
	MPI_Comm_rank(MPI_COMM_WORLD,&rank);
	/* cree le reseau de processors */
	q=sqrt(size);	/* numero de processerus s*s */
	dims[0]=dims[1]=q;
	periodicite[0]=periodicite[1]=0;
	MPI_Cart_create(MPI_COMM_WORLD,2,dims,periodicite,1,&mesh2_comm);
	MPI_Comm_rank(mesh2_comm,&rank);
	MPI_Cart_coords(mesh2_comm,rank,2,coordonne);
	/* forme le done de transmetre */
	s=dim/q;		/* la dimension de done dans un processeur */
	/* faire la comunication et done le resoudre */
	st_mutex_init(mutex);
	st_cond_init(cond);
	st_join_counter_init(cnt_join,size);
	for(i=0;i<size;i++)
		ST_THREAD_CREATE(MPI_Bcastp_check_sth(i,s,c,mesh2_comm,cnt_join));
	/* faites les calcules */
	n=0;
	MPI_Comm_rank(MPI_COMM_WORLD,&n);
	for(l=0;l<s;l++)
	{
		i=s*coordonne[0]+l;
		for(m=0;m<s;m++)
		{
			j=s*coordonne[1]+m;
			c[i][j]=0.0;
			for(k=0;k<dim;k++)
				c[i][j]+=a[i][k]*b[k][j];
		}
		if(n==(NR_ITER-1)) 
		{
			st_mutex_lock(mutex);
			st_cond_broadcast(cond);
			st_mutex_unlock(mutex);
			st_yield();
			n=0;
		}
		else	n++;
	}
	st_mutex_lock(mutex);
	st_cond_broadcast(cond);
	st_mutex_unlock(mutex);
	st_join_counter_wait(cnt_join);
	/* elibere la memoire */
	MPI_Comm_free(&mesh2_comm);
	st_cond_destroy(cond);
	st_mutex_destroy(mutex);
	MPI_Barrier(MPI_COMM_WORLD);
}